package allen.interview.JavaAlgo.leecode;

/**
 * @author AllenWong
 *
 *
 *
 * @date 2022/1/4 下午3:25
 */

//自我介绍
//git
//        面试官好,我叫王建强, 17年天津本科毕业至今已经工作四年半的时间, 期间一直担任Java工程师的职位,
//        熟练使用关系型数据库做数据持久化,对MySQL的表设计以及索引的创建及原理和MySQL的事务都有了解以及应用,
//        后期负责业务规模逐步扩大,对读写分离,垂直分库,水平分库都有相关的应用经验, 分库分表组件sharding-jdbc也有使用的一些心得,
//        并且熟练掌握分布式缓存组件的使用,熟练常握三种缓存模式的使用以及缓存可能会遇到的问题的避免,也有应用过常见的分布式服务的组件,例如 kafka,motan(微博开源的RPC框架),也使用redis做过延时队列,redis作为分布式锁和限流的组件
//
//        毕业之初在新华社下属的中国搜索(前身是即刻搜索)的公司,所在部门是应用研发部, 主要负责国搜内部的业务系统开发, 组内研发有8-10个人,
//        我主要参与开发及维护审核标注系统,负责文稿的审核状态流转模块, 后台登录注册以及权限管理模块,主要技术有 spring boot+ mybatis + MySQL+ 模板渲染框架
//        用户规模是限于内部使用,使用人数有限,难点是需求变化快, 以及审核中的复杂状态流转,还需要一些事务的支持保证审核数据的在数据库中的一致性
//
//        后期我们部门三个人参与到中搜的花漾搜索APP的开发当中(主打青少年绿色搜索的教育APP), 我主要负责的金币商城模块的开发,包括做任务,赢金币以及金币的消费,
//        这时候主要使用Spring Cloud来搭建的微服务架构, 远程调用使用的Feign组件,注册中心使用的是Eureka, 网关getway是用的是zunnl, 这时候也开始接触到了redis实现分布式锁
//        主要应用在做任务的时候加减金币保证数据不会有并发的问题, 这时候也慢慢开始接触到了缓存的使用以及缓存的重要性,也接触到了抢购及限流的使用方式,
//        这个阶段项目的规模相对来讲可能用户量不是太大,但是能够将知识以及真正的企业应用结合起来,能够应对初具规模的分布式应用的开发,以及养成良好编程习惯
//
//        第二家公司在58金融,待了半年的时间,因为20年疫情原因,58金融整个部门被裁员,当时的老大在遣散过我们以后后边也去了有赞好像,
//        所在部门是数据平台, 团队大概20个人左右, 我们小组是6个人,主要负责工程方向的开发工作,在58主要服务金融的营销平台,
//        简单讲通过标签对用户圈人,比如年龄性别,收入,地域,用的手机型号, 做到实时圈人, 然后对圈出来的人做短信和站内信的push, 我主要负责写一些hivesql,跑出来一些用户的标签,
//        负责对Hive表的数据实时读取,做id的转换,然后写个文件供发短信或者站内信,
//
//        目前也就是第三家公司是在微博, 所属部门属于微博研发中心流媒体研发下边的视频平台研发, 部门总共30人左右,整个部门负责,微博的视频上传,存储,编解码,同步feed数据, 业务的研发,视频的关系流,视频集合等等, 我们小团队主要是负责上传, 文件存储, 视频元信息,业务信息,转码信息存储,内容理解(画质,音频识别,音乐识别)
//        我主要负责微博的所有视频集合(只要是一堆视频在一起就叫集合,可以支持任意维度的查询,对外使用motan提供轻量级RPC接口供业务方的各种数据存储及调用)的开发,
//
//        中东版微博的多媒体项目搭建, 文件存储还是现有架构,但是中东版的业务代码,比如视频集合还有Story功能都是单独开发的,
//
//        主要支撑个人主页相册,视频发布,视频推荐, 视频内容的聚合, 首页story功能的开发,直播和feed业务上的关联,直播问答以及直播连麦等功能的开发, 中东版微博因为属于是出海中东的一次试水,目前日活一般般
//        8,9万日活, qps基本是个位数, 现在基本上市两个人在做相关的需求
//
//        我最近年底主要是视频集合和媒体资源库稳定性保障性的工作,以及三节保障的的降级开关和监控的梳理.  比如优化用户维度的视频集缓存大key导致缓存失效, 比如一些非必要的select count采用异步延时写缓存的策略降低db压力,还有分布式锁升级为红锁的修改等等
public class LC101 {
    public boolean isSymmetric(TreeNode root) {
        return check(root, root);

    }

    public boolean check(TreeNode p, TreeNode q) {
        if (p == null && q == null) {
            return true;
        }
        if (p == null || q == null) {
            return false;
        }
        return p.val == q.val && check(p.left, q.right) && check(p.right, q.left);
    }

    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode() {
        }

        TreeNode(int val) {
            this.val = val;
        }

        TreeNode(int val, TreeNode left, TreeNode right) {
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }

}
